#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author : farmer
# @Date : 2020-11-09

from enum import Enum
from enum import unique
import os
from pathlib import Path

import click
import pandas as pd
from tkinter import messagebox
from tkinter import Tk

from utils.data_labeler import DataLabeler
from utils.data_labeler import merge_labels

SENSOR_DATA_NAMES = ['type', 'ts', 'x', 'y', 'z', 'xe', 'ye', 'ze']
SENSOR_DATA_HEADER = ['CurrentTimeMillis', 'EventTimestamp(ns)', 'accel_x', 'accel_y', 'accel_z']

# !! In order to be compatible with historical annotations, please add the type at the end instead of inserting
# Refer to list: https://xiaomi.f.mioffice.cn/docs/dock4H2cyIYjwEGAnMmFH5GOcTc#
LABEL_ITEMS = (
    'Undefined',          # 0
    'Static',             # 1
    'DailyActivity',      # 2, Such as Working/Writing/Chatting
    'OtherSports',        # 3, Larger motions, such as Fitness/Playing ball/Washing
    'BriskWalkInDoor',    # 4
    'BriskWalkOutSide',   # 5
    'RuningInDoor',       # 6
    'RuningOutSide',      # 7
    'BikingInDoor',       # 8
    'BikingOutSide',      # 9
    'EBikingOutSide',     # 10
    'MotoBikingOutSide',  # 11
    'SwimmingInDoor',     # 12
    'SwimmingOutSide',    # 13
    'SubwayTaking',       # 14
    'BusTaking',          # 15
    'CarTaking',          # 16
    'CoachTaking',        # 17
    'Sitting',            # 18
    'Standing',           # 19
    'Lying',              # 20
    'EllipticalMachine',  # 21
    'RowingMachine',      # 22
    'Upstairs',           # 23
    'Downstairs',         # 24
    'Driving',            # 25
    'RopeJump',           # 26
    'SlowWalk'            # 27
)

LABEL_ITEMS_INDEX_DICT = dict(zip(LABEL_ITEMS, list(range(len(LABEL_ITEMS)))))
LABEL_RESULT_FILE_NAME = Path('activity_label_result.csv')

all_files_labels = {}


@unique
class MetaType(Enum):
    DATE_TIME = 0
    ACTIVITY_TYPE = 1


def get_meta_from_file_name(file_name: str, meta_type: MetaType = MetaType.ACTIVITY_TYPE):
    metas = file_name.split('-')
    if MetaType.ACTIVITY_TYPE == meta_type:
        return metas[7].split('_')[1]
    else:
        return ""


def label_sensor_data_file(file_path: Path, result_file: Path = None, label_items=LABEL_ITEMS):
    """
    Label SensorData file that generated by SensorDataCollector app
    Data contents looks like:
    CurrentTimeMillis,EventTimestamp(ns),accel_x,accel_y,accel_z
    1605600680625,5431547485983,0.2299057,4.0800943,10.7349
    ...
    """
    global all_files_labels
    print(f'\nProcessing file: {file_path}')
    df = pd.read_csv(file_path, index_col=False, comment='#')
    ts = df['EventTimestamp(ns)'].values
    utc_ts = df['CurrentTimeMillis'].values
    acc = df.drop(columns=['CurrentTimeMillis', 'EventTimestamp(ns)']).values
    file_name = file_path.stem
    guess_type_name = get_meta_from_file_name(file_name)
    guess_type = LABEL_ITEMS_INDEX_DICT.get(guess_type_name, 0)
    print(f'Current guess type name: {guess_type_name}:{guess_type}')

    file_name_prefix = '-'.join(file_name.split('-')[:-2])
    label_file = file_path.parent / f'{file_name_prefix}-label-result.csv'
    print(f'Label result file path: {label_file}')
    if label_file.exists():
        print('Warning: Label result file exists')
        # temp_win = Tk()
        # temp_win.withdraw()
        # if not messagebox.askokcancel('注意！！', '文件已经标注，重新标注将会覆盖，是否继续？'):
        #     print('Spkiped as file has been labeled')
        #     temp_win.destroy()
        #     return
        # else:
        #     temp_win.destroy()
        #     print('Relabel the file')
    labeler = DataLabeler(label_items)
    labels = labeler.process(utc_ts[0], ts, acc, file_name, selected=guess_type)
    labels = merge_labels(labels)
    if len(labels) > 0:
        all_files_labels[file_name] = labels
        # Write to record fold label result file
        with label_file.open('w+') as f_label:
            for v, s, e in labels:
                f_label.write(f'{v}_{ts[s]}_{ts[e]}\n')
        # Write to global result file
        if result_file is not None:
            with result_file.open('a+') as f_result:
                f_result.write(file_name)
                for v, s, e in labels:
                    f_result.write(f',{v}_{ts[s]}_{ts[e]}')
                f_result.write('\n')


def process_dir(src_dir: Path, result_file: Path = None):
    if src_dir.is_dir():
        print(f'\nProcessing directory: {src_dir}')
        for f in src_dir.glob('*accel-52HZ.csv'):
            label_sensor_data_file(f, result_file)
        for d in src_dir.iterdir():
            process_dir(d, result_file)


def check_result_file(result_file: Path, force):
    if result_file.exists():
        if force:
            os.remove(result_file)
        else:
            print('Label result file exists. To force override use option "-f".')
            exit(1)


@click.command()
@click.argument('acc-file')
@click.option('-f', '--force', is_flag=True, help='Force generate label result file')
def main(acc_file, force):
    acc_file = Path(acc_file)
    if acc_file.is_file():
        label_sensor_data_file(acc_file)
    elif acc_file.is_dir():
        process_dir(acc_file)


if __name__ == '__main__':
    main()
