#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author : farmer
# @Date : 2020-11-09

from datetime import datetime
import os
from pathlib import Path

import click
import numpy as np
import pandas as pd

from utils.data_labeler import DataLabeler
from utils.data_labeler import merge_labels

SENSOR_DATA_NAMES = ['type', 'ts', 'x', 'y', 'z', 'xe', 'ye', 'ze']

# !! In order to be compatible with historical annotations, please add the type at the end instead of inserting
# Refer to list: https://xiaomi.f.mioffice.cn/docs/dock4H2cyIYjwEGAnMmFH5GOcTc#
LABEL_ITEMS = (
    'Undefined',          # 0
    'Static',             # 1
    'DailyActivity',      # 2, Such as Working/Writing/Chatting
    'OtherSports',        # 3, Larger motions, such as Fitness/Playing ball/Washing
    'IndoorWalking',      # 4
    'OutdoorWalking',     # 5
    'IndoorRunning',      # 6
    'OutdoorRunning',     # 7
    'OutdoorBiking',      # 8
    'EllipticalMachine',  # 9
    'RowingMachine'       # 10
)
LABEL_ITEMS_INDEX_DICT = dict(zip(LABEL_ITEMS, list(range(len(LABEL_ITEMS)))))

LABEL_RESULT_FILE_NAME = Path('activity_label_result.csv')
label_result_file = Path('../../../motion/') / LABEL_RESULT_FILE_NAME

all_files_labels = {}


def label_sensor_data_file(file_path: Path, result_file: Path, label_items=LABEL_ITEMS):
    """
    Label SensorData file that generated by SensorDataCollector app
    Data contents looks like:
    # Some comments
    # Or user info
    ts,type,x,y,z,...
    """
    global all_files_labels
    df = pd.read_csv(file_path, header=None, index_col=False, comment='#', names=SENSOR_DATA_NAMES)
    data = df[df['type'] == 35]
    data = data.values
    ts = data[:, 1]
    ts = ts.astype(np.int64)
    acc = data[:, 2:5]
    file_name = file_path.name
    metas = file_path.stem.split('_')
    utc = datetime.strptime(metas[1], '%Y-%m-%d-%H-%M-%S')
    guess_type = LABEL_ITEMS_INDEX_DICT.get(metas[4], 0)
    # Convert to ms
    utc_ts = utc.timestamp() * 1e3
    labeler = DataLabeler(label_items)
    labels = labeler.process(utc_ts, ts, acc, file_name, selected=guess_type)
    labels = merge_labels(labels)
    all_files_labels[file_name] = labels
    if len(labels) > 0:
        with result_file.open('a+') as f_result:
            f_result.write(file_name)
            for v, s, e in labels:
                f_result.write(f',{v}_{ts[s]}_{ts[e]}')
            f_result.write('\n')


def process_dir(src_dir: Path, result_file: Path):
    if src_dir.is_dir():
        print(f'\nProcessing directory: {src_dir}')
        for f in src_dir.glob('*accel-52HZ.csv'):
            label_sensor_data_file(f, result_file)
        for d in src_dir.iterdir():
            process_dir(d, result_file)


def check_result_file(result_file: Path, force):
    if result_file.exists():
        if force:
            os.remove(result_file)
        else:
            print(f'Label result file exists. To force override use option "-f".')
            exit(1)


@click.command()
@click.argument('acc-file')
@click.option('-f', '--force', is_flag=True, help='Force generate label result file')
def main(acc_file, force):
    acc_file = Path(acc_file)
    if acc_file.is_file():
        result_file = acc_file.parent / LABEL_RESULT_FILE_NAME
        check_result_file(result_file, force)

        label_sensor_data_file(acc_file, result_file)
    elif acc_file.is_dir():
        result_file = acc_file / LABEL_RESULT_FILE_NAME
        check_result_file(result_file, force)
        process_dir(acc_file, result_file)


if __name__ == '__main__':
    main()
